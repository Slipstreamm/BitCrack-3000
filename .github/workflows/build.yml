name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'  # Triggers when a new version tag (e.g., v1.0.0) is pushed

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CUDA Toolkit
        run: |
          choco install cuda --version=10.2.89.20191206 -y
        shell: pwsh

      - name: Set CUDA Environment Variables
        run: |
          echo "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2" >> $GITHUB_ENV
          echo "CUDACXX=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\bin\nvcc.exe" >> $GITHUB_ENV
          echo "PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\libnvvp;$env:PATH" >> $GITHUB_ENV
        shell: pwsh

      - name: Register CUDA Build Customizations
        run: |
          $CUDA_PATH="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2"
          $VS_PATH="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\BuildCustomizations"
          if (Test-Path "$CUDA_PATH\include\cuda.h") {
            Write-Host "CUDA installation found!"
            Copy-Item "$CUDA_PATH\extras\visual_studio_integration\MSBuildExtensions\CUDA 10.2.props" "$VS_PATH\CUDA 10.2.props" -Force
            Copy-Item "$CUDA_PATH\extras\visual_studio_integration\MSBuildExtensions\CUDA 10.2.targets" "$VS_PATH\CUDA 10.2.targets" -Force
          } else {
            Write-Host "CUDA installation NOT found!"
            exit 1
          }
        shell: pwsh

        
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet Packages
        run: nuget restore BitCrack.sln

      - name: Build Solution
        run: msbuild BitCrack.sln /p:Configuration=Release /p:Platform="x64"

      - name: Find the built EXE
        run: |
          echo "BUILD_PATH=$(Get-ChildItem -Path x64/Release/clBitCrack.exe | Select-Object -ExpandProperty FullName)" >> $GITHUB_ENV
        shell: pwsh

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ matrix.os }}
          path: path/to/your/compiled/files


  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: compiled-exe
          path: release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
